name: Code Quality and Security

on:
  pull_request:
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '.github/workflows/check_security_vulnerability.yml'
  push:
    branches: [main]
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '.github/workflows/check_security_vulnerability.yml'
  schedule:
    - cron: '0 0 * * 0'

env:
  RUST_TOOLCHAIN: stable
  CARGO_TERM_COLOR: always
  CARGO_NET_RETRY: 5

# Consolidated top-level permissions
permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Security Scan - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue with other builds even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Configure for platform-specific optimizations
      - name: Configure Windows optimizations
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "CARGO_INCREMENTAL=false" >> $GITHUB_ENV
          echo "RUSTFLAGS=-Ctarget-feature=+crt-static" >> $GITHUB_ENV
          echo "RUSTDOCFLAGS=-Cpanic=abort" >> $GITHUB_ENV
      
      # Improved cache setup with newer action
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-${{ env.RUST_TOOLCHAIN }}-${{ runner.os }}"
          cache-directories: "${{ runner.os == 'Windows' && 'C:\Users\runneradmin\.cargo\bin' || '~/.cargo/bin' }}"
          save-if: ${{ github.ref == 'refs/heads/main' }}
      
      # Clippy Analysis - use a faster installation on Windows
      - name: Setup Rust tools (non-Windows)
        if: runner.os != 'Windows'
        run: |
          rustup toolchain install ${{ env.RUST_TOOLCHAIN }}
          rustup component add clippy
          cargo install clippy-sarif sarif-fmt --force
      
      - name: Setup Rust tools (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          rustup toolchain install ${{ env.RUST_TOOLCHAIN }} --profile minimal
          rustup component add clippy
          # Only install if not already in cache
          if ! command -v clippy-sarif &> /dev/null; then
            cargo install clippy-sarif --force
          fi
          
          if ! command -v sarif-fmt &> /dev/null; then
            cargo install sarif-fmt --force
          fi
      
      - name: Run Clippy Analysis
        run: cargo clippy --all-features --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true
      
      - name: Upload Clippy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true

      # DevSkim Security Scan - only on Ubuntu
      - name: Run DevSkim scanner
        if: runner.os == 'Linux'
        uses: microsoft/DevSkim-Action@v1
        with:
          directory-to-scan: .
      
      - name: Upload DevSkim scan results
        if: runner.os == 'Linux'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: devskim-results.sarif

  osv-scanner:
    name: OSV Scanner
    runs-on: ubuntu-latest # Only need to run once
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run OSV Scanner
        uses: google/osv-scanner/actions/scanner@main
        with:
          scan-args: "--lockfile --config=./.osv-scanner.toml"
        continue-on-error: true  # Don't fail the workflow on vulnerabilities