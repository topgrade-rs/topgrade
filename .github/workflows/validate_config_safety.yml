name: Validate Example Configuration Safety

on:
  pull_request:
    paths:
      - 'config.example.toml'
      - 'src/config.rs'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

jobs:
  config-safety:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5.0.0
    
    - name: Setup Rust Cache
      uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
      with:
        prefix-key: config-safety
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Test example config parsing
      run: cargo test test_default_config
    
    - name: Validate safe defaults in example config
      run: |
        set -euo pipefail  # Exit on any error, undefined variable, or pipe failure
        
        # Function to test SDIO detection with timeout
        test_sdio_detection() {
          local config_file="$1"
          local should_detect="$2"
          local description="$3"
          
          echo "Testing $description..."
          
          if timeout 10 cargo run -- --config "$config_file" --dry-run --only sdio 2>&1 | grep -q "Snappy Driver Installer Origin"; then
            if [[ "$should_detect" == "true" ]]; then
              echo "✓ $description properly detected SDIO"
              return 0
            else
              echo "❌ UNSAFE: $description enables dangerous features!"
              return 1
            fi
          else
            if [[ "$should_detect" == "false" ]]; then
              echo "✓ $description properly disables dangerous features"
              return 0
            else
              echo "❌ FAILURE: $description should have detected SDIO"
              return 1
            fi
          fi
        }
        
        # Create config with dangerous options uncommented
        cat > test_dangerous.toml << 'EOF'
        [misc]
        assume_yes = true
        [windows]
        enable_sdio = true
        winget_use_sudo = true
        EOF
        
        # Test that dangerous config would actually run SDIO (we expect this)
        test_sdio_detection "test_dangerous.toml" "true" "dangerous config"
        
        # Create config by uncommenting safe defaults from example
        sed 's/^# \(enable_sdio = false\)/\1/' config.example.toml > test_safe.toml
        sed -i 's/^# \(assume_yes = false\)/\1/' test_safe.toml  
        sed -i 's/^# \(winget_use_sudo = false\)/\1/' test_safe.toml
        
        # Test that safe config doesn't run SDIO
        test_sdio_detection "test_safe.toml" "false" "safe uncommented config"
        
        # Clean up temporary files
        rm -f test_dangerous.toml test_safe.toml
        
        echo "✅ Configuration safety validation passed!"
